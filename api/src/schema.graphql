type Kanji {
  id: ID!
  value: String
  score: Int
  readings: [Reading] @relation(name: "HAS_READING", direction: "OUT")
  meanings: [Meaning] @relation(name: "HAS_MEANING", direction: "OUT")

  randomConnectedMeanings: [Meaning]
    @cypher(
      statement: """
        MATCH (this)-[:HAS_MEANING]->(m:Meaning)
        WITH m, rand() AS rand
        RETURN m
        ORDER BY rand
      """
    )

  randomNotConnectedMeanings: [Meaning]
    @cypher(
      statement: """
        MATCH (this)-[:SIMILAR]-(:Kanji)-[:HAS_MEANING]->(m:Meaning)
        WHERE NOT (this)-[:HAS_MEANING]->(m)
        WITH DISTINCT m, rand() AS rand
        RETURN m
        ORDER BY rand
      """
    )

    randomConnectedReadings: [Reading]
    @cypher(
      statement: """
        MATCH (this)-[:HAS_READING]->(r:Reading)
        WITH r, rand() AS rand
        RETURN r
        ORDER BY rand
      """
    )

  randomNotConnectedReadings: [Reading]
    @cypher(
      statement: """
        MATCH (this)-[:SIMILAR]-(:Kanji)-[:HAS_READING]->(r:Reading)
        WHERE NOT (this)-[:HAS_READING]->(r)
        WITH DISTINCT r, rand() AS rand
        RETURN r
        ORDER BY rand
      """
    )
}

type Reading {
  id: ID!
  value: String

  score: Int
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_READING]-(k:Kanji)
        RETURN round(avg(k.score))
      """
    )

  randomConnectedKanjis: [Kanji]
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_READING]-(k:Kanji)
        WITH k, rand() AS rand
        RETURN k
        ORDER BY rand
      """
    )

  randomNotConnectedKanjis: [Kanji]
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_READING]-(:Kanji)-[:SIMILAR]-(k:Kanji)
        WHERE NOT (this)<-[:HAS_READNING]->(k)
        WITH DISTINCT k, rand() AS rand
        RETURN k
        ORDER BY rand
      """
    )
}

type Meaning {
  id: ID!
  value: String

  score: Int
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_MEANING]-(k:Kanji)
        RETURN round(avg(k.score))
      """
    )

  randomConnectedKanjis: [Kanji]
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_MEANING]-(k:Kanji)
        WITH k, rand() AS rand
        RETURN k
        ORDER BY rand
      """
    )

  randomNotConnectedKanjis: [Kanji]
    @cypher(
      statement: """
        MATCH (this)<-[:HAS_MEANING]-(:Kanji)-[:SIMILAR]-(k:Kanji)
        WHERE NOT (this)<-[:HAS_MEANING]->(k)
        WITH DISTINCT k, rand() AS rand
        RETURN k
        ORDER BY rand
      """
    )
}

type User {
  id: ID!
  name: String!
  score: Int
}


type Query {
  randomKanji(level: String): Kanji
    @cypher(
      statement: """
        MATCH (k:Kanji)-[:HAS_LEVEL]->(:Level {value: $level})
        WITH k, rand() AS rand
        RETURN k
        ORDER BY rand
        LIMIT 1
      """
    )

  randomMeaning(level: String): Meaning
    @cypher(
      statement: """
        MATCH (m:Meaning)<-[:HAS_MEANING]-(:Kanji)-[:HAS_LEVEL]->(:Level {value: $level})
        WITH m, rand() AS rand
        RETURN m
        ORDER BY rand
        LIMIT 1
      """
    )

  randomReading(level: String): Reading
    @cypher(
      statement: """
        MATCH (r:Reading)<-[:HAS_READING]-(:Kanji)-[:HAS_LEVEL]->(:Level {value: $level})
        WITH r, rand() AS rand
        RETURN r
        ORDER BY rand
        LIMIT 1
      """
    )
}
